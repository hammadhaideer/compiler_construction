using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace PasswordGeneratorApp
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void btnGeneratePassword_Click(object sender, EventArgs e)
        {
            // Get the inputs from the text boxes
            string firstName = txtFirstName.Text;
            string lastName = txtLastName.Text;
            string regNumber = txtRegNumber.Text;

            // Generate the password
            string password = GeneratePassword(firstName, lastName, regNumber);

            // Display the generated password in the label
            lblPassword.Text = $"Generated Password: {password}";
        }

        private string GeneratePassword(string firstName, string lastName, string regNumber)
        {
            // Extract letters
            char firstLetterFirstName = firstName[0];
            char lastLetterFirstName = firstName[firstName.Length - 1];

            // Extract second letters
            char secondLetterFirstName = firstName.Length > 1 ? firstName[1] : 'A'; // Default to 'A'
            char secondLetterLastName = lastName.Length > 1 ? lastName[1] : 'A';   // Default to 'A'

            // Generate password components
            StringBuilder passwordBuilder = new StringBuilder();
            passwordBuilder.Append(regNumber);                         // 1. Registration number
            passwordBuilder.Append(firstLetterFirstName);             // 2. First letter of first name
            passwordBuilder.Append(lastLetterFirstName);              // 2. Last letter of first name
            passwordBuilder.Append(secondLetterFirstName);            // 3. Second letter of first name
            passwordBuilder.Append(secondLetterLastName);             // 3. Second letter of last name

            // Add random special characters
            passwordBuilder.Append(GetRandomSpecialCharacters(2));     // 5. Special characters

            // Ensure password has at least 14 characters and does not contain '#'
            string password = passwordBuilder.ToString();

            if (password.Length < 14)
            {
                password += GetRandomAlphabets(14 - password.Length); // Fill remaining characters
            }

            // Check if it meets all criteria
            return ValidatePassword(password) ? password : "Failed to generate a valid password.";
        }

        private string GetRandomSpecialCharacters(int count)
        {
            const string specialChars = "!@#$%^&*()-_=+[]{}|;:',.<>?";
            Random random = new Random();
            StringBuilder specialCharacters = new StringBuilder();

            for (int i = 0; i < count; i++)
            {
                specialCharacters.Append(specialChars[random.Next(specialChars.Length)]);
            }

            return specialCharacters.ToString();
        }

        private string GetRandomAlphabets(int count)
        {
            const string alphabets = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Random random = new Random();
            StringBuilder randomAlphabets = new StringBuilder();

            for (int i = 0; i < count; i++)
            {
                randomAlphabets.Append(alphabets[random.Next(alphabets.Length)]);
            }

            return randomAlphabets.ToString();
        }

        private bool ValidatePassword(string password)
        {
            // Regex conditions
            string pattern = @"^(?=.*[a-zA-Z])(?=.*[!@#$%^&*()\-_=+[\]{}|;:',.<>?])[^\#]{14,}$";
            return Regex.IsMatch(password, pattern);
        }
    }
}
